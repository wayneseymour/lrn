{
  "name": "human-view-switcher",
  "version": "0.0.1",
  "description": "A utility for swapping out humanjs or backbone views inside an element.",
  "main": "human-view-switcher.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/henrikjoreteg/human-view-switcher"
  },
  "keywords": [
    "humanjs",
    "views",
    "backbone",
    "clientside"
  ],
  "author": {
    "name": "Henrik Joreteg",
    "email": "henrik@andyet.net"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/henrikjoreteg/human-view-switcher/issues"
  },
  "homepage": "https://github.com/henrikjoreteg/human-view-switcher",
  "readme": "# human-view-switcher\n\nThis module does one thing: *it helps you swap out views inside of an element*. It's compatible with human-view, backbone views and any view that has an `.el`, `.render` and `.remove()`\n\nWhat might you do with it?\n- build a page container for your app.\n- build a system for managing display of modals in your single page app.\n- When you want to animate a transition between showing any two views.\n\nWhat it does\n- Takes an instantiated view and renders it in the container.\n- Removes the existing view from the container and calls `remove` on it.\n- Makes it easy to do custom stuff as views are added and removed.\n- Works either synchronously or asynchronously depending on whether you want to animate transitions between the views.\n- Makes no assumptions about what your views do or how they're structured except the following:\n    - Views should have an `.el` property that is the root element of the view.\n    - Views should have a `.remove()` method that cleans up and unbinds methods accordingly.\n    - If your view has a `.render()` method it will get called before it's shown.\n    - Beyond this, they could be any object.\n- IT DOES VERY LITTLE ELSE (and *that* is a feature)\n\n## installing\n\n```\nnpm install human-view-switcher\n```\n\n## example usage\n\nHere's an example of how you might use the view switcher to handle page views within your humanjs app.\n\n`mainview.js`\n\n```js\nvar HumanView = require('human-view');\nvar templates = require('./templates');\n\nmodule.exports = HumanView.extend({\n    template: templates.body,\n    render: function () {\n        // render our template\n        this.renderAndBind();\n\n        // grab the element without our template based on its \"role\" attribute\n        this.pageContainer = this.getByRole('page-container');\n\n        // set up our page switcher for that element\n        this.pageSwitcher = new ViewSwitcher(this.pageContainer, {\n            // here we provide a few things we'd like to do each time\n            // we switch pages in the app.\n            show: function (newView, oldView) {\n                // set our document title\n                document.title = newView.pageTitle || 'my awesome app';\n                // scroll to the top\n                document.body.scrollTop = 0;\n                // perhaps store a reference to our current page on our\n                // app global for easy access from the browser console.\n                app.currentPage = view;\n            }\n        });\n    } \n});\n```\n\nOr if you wanted to animate them you can do it asynchronously like so:\n\n```js\n// set up our page switcher for that element\nthis.pageSwitcher = new ViewSwitcher(this.pageContainer, {\n    // whether or not to wait for remove to be done before starting show\n    waitForRemove: true,\n    // here we provide a few things to do before the element gets\n    // removed from the DOM.\n    hide: function (oldView, newView, cb) {\n        // it's inserted and rendered for me so we'll add a class \n        // that has a corresponding CSS transition.\n        view.el.classList.add('animateOut');\n        // give it time to finish (yes there are other ways to do this)\n        setTimeout(cb, 1000);\n    },\n    // here we provide a few things we'd like to do each time\n    // we switch pages in the app.\n    show: function (view, oldView) {\n        // it's inserted and rendered for me\n        document.title = newView.pageTitle || 'app name';\n        document.body.scrollTop = 0;\n\n        // store an additional reference, just because\n        app.currentPage = newView;\n\n        view.el.classList.add('animateIn');\n        setTimeout(cb, 2000)\n    }\n});\n```\n\n\n## Changelog\n\n- 0.0.1 Initial version (prototype stage, beware)\n\n## Credits\n\nWritten by [@HenrikJoreteg](http://twitter.com/henrikjoreteg) with inspiration and ideas from [@philip_roberts](http://twitter.com/philip_roberts) and [@wraithgar](http://twitter.com/wraithgar) and [other awesome Yetis](http://andyet.com/team).\n\n\n## License\n\nMIT\n",
  "readmeFilename": "README.md",
  "_id": "human-view-switcher@0.0.1",
  "dist": {
    "shasum": "c9de77b95524f1d684afb2fc790cde958523a83f"
  },
  "_from": "human-view-switcher@~0.0.1",
  "_resolved": "https://registry.npmjs.org/human-view-switcher/-/human-view-switcher-0.0.1.tgz"
}
